@page "/AltaUsuario"
@using BlazorApp1.Client.Servicios
@inject NavigationManager navigationManager
@inject HttpClient ClienteHttp
@* lo pasmaos a import.razor para hacerlo para todos  *@
@* @using Microsoft.Extensions.Logging *@
@inject ILogger<AltaUsuario> l;
@inject IServicioTienda servicioTienda


<br />
<div class="main">
    <EditForm Model="@nuevoUsuario" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <h3>Nuevo Usuario</h3>
        <hr />
        <ValidationSummary />
        <div class="row">
            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">Nombre</span>
                <InputText id="Nombre" class="form-control" placeholder=""
                           @bind-Value="nuevoUsuario.Nombre" />

            </div>
            <ValidationMessage For="@(() => nuevoUsuario.Nombre)" />
        </div>
        <div class="row">
            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">Apellido</span>
                <InputText id="Apellido" class="form-control" placeholder=""
                           @bind-Value="nuevoUsuario.Apellido" />

            </div>
            <ValidationMessage For="@(() => nuevoUsuario.Apellido)" />
        </div>

        <div class="row">
            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">Email</span>
                <InputText id="Email" class="form-control" placeholder=""
                           @bind-Value="nuevoUsuario.Email" />

            </div>
            <ValidationMessage For="@(() => nuevoUsuario.Email)" />
        </div>
        <div class="row">
            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">Contraseña</span>
                <InputText type="password" id="password" class="form-control" placeholder=""
                           @bind-Value="nuevoUsuario.Password" />

            </div>
            <ValidationMessage For="@(() => nuevoUsuario.Password)" />
        </div>

        <div class="row content">
            <div class="col-md-1">
                <input type="submit" class="btn btn-primary" value="Guardar" @onclick="NuevaAlta" />
            </div>
            <div class="col-md-2">
                <input type="button" value="Cancelar" class="btn btn-danger" @onclick="Cancelar" />
            </div>
        </div>

    </EditForm>
    @urlResultado
</div>

@if (mostrarError)
{
    <DetallesErrores OnCerrar="@(() => cerrarCapa())" TextoError="@mensajeError"> </DetallesErrores>
}


@code {
    Usuario nuevoUsuario = new Usuario();
    Boolean mostrarError = false;
    String mensajeError = String.Empty;
    String tokenPeticion = String.Empty;
    String urlResultado = String.Empty;

    public void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            tokenPeticion = await servicioTienda.ObtenerToken();
        }
        catch (Exception ex)
        {
            l.LogError("Se produjo un error: " + ex.ToString());
            //se agrego tambien
            mensajeError = ex.Message;
            mostrarError = true;
        }
    }
    // aca se tuvo que modificar el metodo nueva alta para utilizar el servicio
    async protected void NuevaAlta()
    {
        try
        {
            if (nuevoUsuario.Email != null && nuevoUsuario.Password != null &&
                nuevoUsuario.Nombre != null && nuevoUsuario.Apellido != null)
            {
                urlResultado = await servicioTienda.AltaUsuario(tokenPeticion, nuevoUsuario);
            }
        }
        catch (Exception ex)
        {
            l.LogError("Se produjo un error: " + ex.ToString());
            mostrarError = true;
            // Capa error generica
        }
        finally
        {
            StateHasChanged();
        }
    }

    protected void Cancelar()
    {
        //Redirigiremos a la página de Login
        navigationManager.NavigateTo("/");
    }
    private void cerrarCapa()
    {
        mostrarError = false;
    }
    //aca estaba el metodo para obtener el token pero este se convirtio a un servicio por lo que se quito de aca
    //tambien se elimino el metodo de comprobar error
    
}
