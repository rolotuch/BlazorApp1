@page "/IniciarSesion"
@using BlazorApp1.Client.Servicios
@inject HttpClient ClienteHttp
@inject ISessionStorageService almacenarSesion
@inject NavigationManager navigationmanager
@inject AuthenticationStateProvider authenticationStateProvider
@inject ILogger<LogIn> l;
@* @using System.Net.Http.Headers
@using Microsoft.Extensions.Configuration;
@inject IConfiguration Configuration *@

@inject IServicioTienda servicioTienda

@inherits LayoutComponentBase



<div class="main">
    <div class="card" style="width: 32rem;">
        <div class="card-header">
            Iniciar Sessión
        </div>
        <div class="card-body">
            <EditForm Model="@usuarioLogin" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div>
                    <h3 style="font-weight:bold; color:sienna">Iniciar Sesión</h3>
                </div>
                <div>
                    <br />
                </div>
                <div class="form-group row">
                    <InputText class="form-control col-12" @bind-Value="usuarioLogin.EmailLogin" placeholder="Email" />
                    <ValidationMessage For="@(() => usuarioLogin.EmailLogin)" />
                </div>
                <br />
                <div class="form-group row">
                    <InputText type="password" class="form-control col-12" @bind-Value="usuarioLogin.Password" placeholder="Password" />
                    <ValidationMessage For="@(() => usuarioLogin.Password)" />

                </div>
                <br />
                <div class="form-group row">
                    <input type="submit" class="form-control" value="Login" @onclick="ValidarUsuario" />
                </div>
                <div>
                    <br />
                </div>
                <div class="form-group row">
                    <a href="/AltaUsuario" class="form-control">Darse de alta</a>
                </div>
            </EditForm>
        </div>

        <div class="card-footer">
            <div class="form-group row">
                <input type="submit" class="form-control" value="Recuperar password" @onclick="RecuperarPass" />
            </div>
        </div>
    </div>
</div>

@if (mostrarError)
{
    <DetallesErrores OnCerrar="@(() => cerrarCapa())" TextoError="@mensajeError"></DetallesErrores>
}

@if (muestraCapaPass)
{
    <RecordarPass OnCambiarPassword="cambiarPass" OnCerrar="cerrarCapaPass"
                  valorActual="@textoAux" CambioTexto="cambioTexto" url="@urlResultado"></RecordarPass>
}


@code {

    UsuarioLogIn usuarioLogin = new UsuarioLogIn();
    Boolean mostrarError = false;
    String mensajeError = String.Empty;
    String tokenPeticion = String.Empty;
    Boolean muestraCapaPass = false;
    Usuario usuarioAux;
    String textoAux = String.Empty;
    String urlResultado = String.Empty;

    public void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            tokenPeticion = await servicioTienda.ObtenerToken();
            var estadoAutenticaion = await authenticationStateProvider.GetAuthenticationStateAsync();
            var user = estadoAutenticaion.User;
            if (user.Identity!.IsAuthenticated)
            {
                StateHasChanged();
                navigationmanager.NavigateTo("/MisCursos");
            }
        }
        catch (Exception ex)
        {
            l.LogError("Se produjo un error: " + ex.ToString());
            mostrarError = true;
            // Capa error generica
        }
    }

    private async void ValidarUsuario()
    {
        try
        {
            if (usuarioLogin.EmailLogin != null && usuarioLogin.Password != null)
            {
                var respuesta = await servicioTienda.ValidarUsuario(tokenPeticion, usuarioLogin);
                // ClienteHttp.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenPeticion);
                // var respuesta = await ClienteHttp.PostAsJsonAsync("api/ValidarUsuario", usuarioLogin);
                if (respuesta.IsSuccessStatusCode)
                {
                    UsuarioLogIn usuarioLogInRespuesta = await respuesta.Content.ReadFromJsonAsync<UsuarioLogIn>();
                    if (usuarioLogInRespuesta.error == null || usuarioLogInRespuesta.error.mensaje == String.Empty)
                    {
                        await almacenarSesion.SetItemAsync("email", usuarioLogin.EmailLogin);
                        navigationmanager.NavigateTo("/MisCursos", true);
                    }
                    else
                    {
                        if (usuarioLogInRespuesta.error.mostrarEnPantalla)
                        {
                            //Capa error con mensaje para usuario
                            mostrarError = true;
                            mensajeError = usuarioLogInRespuesta.error.mensaje;
                            StateHasChanged();
                        }
                        else
                        {
                            // Capa error generica
                            l.LogError("Se produjo un error: " + usuarioLogInRespuesta.error.mensaje);
                            throw new Exception("Intentelo de nuevo se produjo un error");
                        }
                    }
                }
                else
                    throw new Exception("Intentelo de nuevo se produjo un error");
            }
        }
        catch (Exception ex)
        {
            l.LogError("Se produjo un error: " + ex.ToString());
            // Capa error generica
            mostrarError = true;
        }
    }

    private void cerrarCapa()
    {
        mostrarError = false;
    }

    //se elimino el metodo de mostrar error porque se paso como servicio al igual que generar token
    private void RecuperarPass()
    {
        textoAux = String.Empty;
        muestraCapaPass = true;
    }

    private void cerrarCapaPass()
    {
        muestraCapaPass = false;
    }

    private void cambioTexto(string e)
    {
        textoAux = e;
    }

    private async void cambiarPass()
    {
        try
        {
            if (textoAux == String.Empty)
                textoAux = "No especificado";
            //Validamos que el email introducido existe en nuestro sistema. No agregamos el token porque ya lo
            // tenemos incrustado
            // usuarioAux = await ClienteHttp.GetFromJsonAsync<Usuario>("api/DatosUsaurio/" + textoAux);
            usuarioAux = await servicioTienda.DatosUsaurio(tokenPeticion, textoAux);
            if (usuarioAux.error == null)
            {
                // string parametro = await ClienteHttp.GetStringAsync("api/Cifrar/" + textoAux);
                string parametro = await servicioTienda.Cifrar(tokenPeticion, textoAux);
                urlResultado = "https://localhost:7070/CambioPass/" + parametro;
                StateHasChanged();
            }
            else
                servicioTienda.comprobarError(usuarioAux.error);
        }
        catch (Exception ex)
        {
            l.LogError("Se produjo un error: " + ex.ToString());
            mostrarError = true;
            StateHasChanged();
        }
    }
}
