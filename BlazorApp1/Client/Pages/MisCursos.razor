@page "/MisCursos"
@using BlazorApp1.Client.Servicios
@inject NavigationManager navigationManager
@inject HttpClient ClienteHttp
@inject AuthenticationStateProvider authenticationStateProvider
@inject ILogger<MisCursos> l;

@inject IServicioTienda servicioTienda

<br />
<div class="main">
    <AuthorizeView>
        <Authorized>
            <h1>Mis cursos</h1>
            @if (resultado == null || resultado.Count == 0)
            {
                <p class="text-danger">No te has inscrito en nigún curso de los disponibles</p>
            }
            else
            {
                <table class="table table-hover">
                    <tbody>
                        @foreach (Cursos c in resultado)
                        {
                            <tr>
                                <td>
                                    <img src="/@c.RutaImagen" alt="@c.Nombre" width="150" height="80">
                                    <strong>@c.Nombre</strong>
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>
            }

        </Authorized>
        <NotAuthorized>
            No Autorizado
        </NotAuthorized>
    </AuthorizeView>
</div>

@if (mostrarError)
{
    <DetallesErrores OnCerrar="@(() => cerrarCapa())" TextoError="@mensajeError"></DetallesErrores>
}

@code
{
    Usuario u = new Usuario();
    List<Cursos> resultado = new List<Cursos>();
    Boolean mostrarError = false;
    String mensajeError = String.Empty;
    String tokenPeticion = String.Empty;


    protected async override Task OnInitializedAsync()
    {
        try
        {
            tokenPeticion = await servicioTienda.ObtenerToken();
            var estadoAutenticaion = await authenticationStateProvider.GetAuthenticationStateAsync();
            var user = estadoAutenticaion.User;
            if (user.Identity.IsAuthenticated)
            {                
                // ClienteHttp.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenPeticion);
                // u = await ClienteHttp.GetFromJsonAsync<Usuario>("api/DatosUsaurio/" + user.Identity.Name);
                u = await servicioTienda.DatosUsaurio(tokenPeticion, user.Identity.Name);
                resultado = await servicioTienda.DameCursosUsuario(tokenPeticion, u);
                StateHasChanged();

                // if (resultado.Count > 0)
                //     comprobarError(u.error);

                // ClienteHttp.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenPeticion);
                // resultado = await ClienteHttp.GetFromJsonAsync<List<Cursos>>("api/DameCursosUsuario/" + u.Id);
                // if (resultado.Count > 0)
                //     comprobarError(resultado[0].error);
            }
        }
        catch (Exception ex)
        {
            l.LogError("Se produjo un error: " + ex.ToString());
            // Capa error generica
            mostrarError = true;
            StateHasChanged();
        }
    }    

    private void cerrarCapa()
    {
        mostrarError = false;
    }

    //se elimino el metodo de mostrar error porque se paso como servicio al igual que generar token
}
